{"ast":null,"code":"var _jsxFileName = \"/app/src/Speakers.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useContext, useReducer, useCallback, useMemo } from \"react\";\nimport axios from \"axios\"; //import \"bootstrap/dist/css/bootstrap.min.css\";\n//import \"../static/site.css\";\n\nimport { ConfigContext } from \"./App\";\nimport { Header } from \"../src/Header\";\nimport { Menu } from \"../src/Menu\";\nimport SpeakerData from \"./SpeakerData\";\nimport SpeakerDetail from \"./SpeakerDetail\";\nimport speakersReducer from \"./speakersReducer\";\nimport useAxiosFetch from \"./useAxiosFetch\";\n\nconst Speakers = ({}) => {\n  // const { data, isLoading, hasErrored, errorMessage, updateDataRecord\n  // } = useAxiosFetch(\"http://172.16.0.0:4000/speakers\", []);\n  const {\n    data,\n    isLoading,\n    hasErrored,\n    errorMessage,\n    updateDataRecord\n  } = useAxiosFetch(\"http://localhost:4000/speakers\", []);\n  const {\n    0: speakingSaturday,\n    1: setSpeakingSaturday\n  } = useState(true);\n  const {\n    0: speakingSunday,\n    1: setSpeakingSunday\n  } = useState(true); //const context = useContext(ConfigContext);\n\n  const handleChangeSaturday = () => {\n    setSpeakingSaturday(!speakingSaturday);\n  };\n\n  const handleChangeSunday = () => {\n    setSpeakingSunday(!speakingSunday);\n  };\n\n  const heartFavoriteHandler = useCallback((e, speakerRec) => {\n    e.preventDefault();\n\n    const toggledRec = _objectSpread(_objectSpread({}, speakerRec), {}, {\n      favorite: !speakerRec.favorite\n    });\n\n    axios.put(`http://172.16.0.0:4000/speakers/${speakerRec.id}`, toggledRec).then(function (response) {\n      updateDataRecord(toggledRec);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, []);\n  const newSpeakerList = useMemo(() => data.filter(({\n    sat,\n    sun\n  }) => speakingSaturday && sat || speakingSunday && sun).sort(function (a, b) {\n    if (a.firstName < b.firstName) {\n      return -1;\n    }\n\n    if (a.firstName > b.firstName) {\n      return 1;\n    }\n\n    return 0;\n  }), [speakingSaturday, speakingSunday, data]);\n  const speakerListFiltered = isLoading ? [] : newSpeakerList;\n  if (hasErrored) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, errorMessage, \"\\xA0\\\"Make sure you have launched \\\"npm run json-server\\\"\");\n  /*\n  const [speakingSaturday, setSpeakingSaturday] = useState(true);\n  const [speakingSunday, setSpeakingSunday] = useState(true);\n   //const [isLoading, setIsLoading] = useState(true);\n  //const [speakerList, setSpeakerList] = useState([]);\n  //const [speakerList, setSpeakerList] = useReducer((state, action) => action, []);\n   \n  // function speakerReducer(state, action) {\n  //   function updateFavorite(favoriteValue) {\n  //     return state.map((item, index) => {\n  //       if (item.id === action.sessionId) {\n  //         item.favorite = favoriteValue;\n  //         return item;\n  //       }\n  //       return item;\n  //     });\n  //   }\n  //   switch (action.type) {\n  //     case \"setSpeakerList\": {\n  //       return action.data\n  //     }\n  //     case \"favorite\": {\n  //       return updateFavorite(true);\n  //     }\n  //     case \"unfavorite\": {\n  //       return updateFavorite(false);\n  //     }\n  //     default:\n  //       return state;\n  //   }\n  // }\n  \n  //const [speakerList, dispatch] = useReducer(speakersReducer, []);\n   const context = useContext(ConfigContext);\n   // useEffect(() => {\n  //   setIsLoading(true);\n  //   new Promise(function (resolve) {\n  //     setTimeout(function () {\n  //       resolve();\n  //     }, 1000);\n  //   }).then(() => {\n  //     setIsLoading(false);\n  //     const speakerListServerFilter = SpeakerData.filter(({ sat, sun }) => {\n  //       return (speakingSaturday && sat) || (speakingSunday && sun);\n  //     });\n  //     //setSpeakerList(speakerListServerFilter);\n  //     dispatch({\n  //       type: \"setSpeakerList\",\n  //       data: speakerListServerFilter\n  //     });\n  //   });\n  //   return () => {\n  //     console.log(\"cleanup\");\n  //   };\n  // }, []); // [speakingSunday, speakingSaturday]);\n  \n   const handleChangeSaturday = () => {\n    setSpeakingSaturday(!speakingSaturday);\n  };\n   const handleChangeSunday = () => {\n    setSpeakingSunday(!speakingSunday);\n  };\n   const heartFavoriteHandler = useCallback((e, favoriteValue) => {\n    e.preventDefault();\n    const sessionId = parseInt(e.target.attributes[\"data-sessionid\"].value);\n    dispatch({\n      type: favoriteValue === true ? \"favorite\" : \"unfavorite\",\n      sessionId\n    });\n    //console.log(\"changing session favorte to \" + favoriteValue);\n  }, []);\n   const newSpeakerList = useMemo(\n    () => data\n      .filter(\n        ({ sat, sun }) => (speakingSaturday && sat) || (speakingSunday && sun)\n      )\n      .sort(function (a, b) {\n        if (a.firstName < b.firstName) {\n          return -1;\n        }\n        if (a.firstName > b.firstName) {\n          return 1;\n        }\n        return 0;\n      }), [speakingSaturday, speakingSunday, data]);\n   const speakerListFiltered = isLoading\n    ? []\n    : newSpeakerList;\n  */\n\n  if (isLoading) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 25\n    }\n  }, \"Loading...\");\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }), __jsx(Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"btn-toolbar  margintopbottom5 checkbox-bigger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"hide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"form-check-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, __jsx(\"label\", {\n    className: \"form-check-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    onChange: handleChangeSaturday,\n    checked: speakingSaturday,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }), \"Saturday Speakers\")), __jsx(\"div\", {\n    className: \"form-check-inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, __jsx(\"label\", {\n    className: \"form-check-label\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    onChange: handleChangeSunday,\n    checked: speakingSunday,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }), \"Sunday Speakers\")))), __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"card-deck\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, speakerListFiltered.map(({\n    id,\n    firstName,\n    lastName,\n    sat,\n    sun,\n    bio,\n    favorite\n  }) => {\n    return __jsx(SpeakerDetail, {\n      key: id,\n      id: id,\n      favorite: favorite,\n      onHeartFavoriteHandler: heartFavoriteHandler,\n      firstName: firstName,\n      lastName: lastName,\n      bio: bio,\n      sat: sat,\n      sun: sun,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 19\n      }\n    });\n  })))));\n};\n\nexport default Speakers;","map":{"version":3,"sources":["/app/src/Speakers.js"],"names":["React","useState","useEffect","useContext","useReducer","useCallback","useMemo","axios","ConfigContext","Header","Menu","SpeakerData","SpeakerDetail","speakersReducer","useAxiosFetch","Speakers","data","isLoading","hasErrored","errorMessage","updateDataRecord","speakingSaturday","setSpeakingSaturday","speakingSunday","setSpeakingSunday","handleChangeSaturday","handleChangeSunday","heartFavoriteHandler","e","speakerRec","preventDefault","toggledRec","favorite","put","id","then","response","catch","error","console","log","newSpeakerList","filter","sat","sun","sort","a","b","firstName","speakerListFiltered","map","lastName","bio"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext, useReducer, useCallback, useMemo } from \"react\";\nimport axios from \"axios\";\n\n//import \"bootstrap/dist/css/bootstrap.min.css\";\n//import \"../static/site.css\";\n\nimport { ConfigContext } from \"./App\";\nimport { Header } from \"../src/Header\";\nimport { Menu } from \"../src/Menu\";\nimport SpeakerData from \"./SpeakerData\";\nimport SpeakerDetail from \"./SpeakerDetail\";\nimport speakersReducer from \"./speakersReducer\";\nimport useAxiosFetch from \"./useAxiosFetch\";\n\nconst Speakers = ({ }) => {\n\n  // const { data, isLoading, hasErrored, errorMessage, updateDataRecord\n  // } = useAxiosFetch(\"http://172.16.0.0:4000/speakers\", []);\n\n   const { data, isLoading, hasErrored, errorMessage, updateDataRecord\n   } = useAxiosFetch(\"http://localhost:4000/speakers\", []);\n\n  const [speakingSaturday, setSpeakingSaturday] = useState(true);\n  const [speakingSunday, setSpeakingSunday] = useState(true);\n  //const context = useContext(ConfigContext);\n\n  const handleChangeSaturday = () => {\n    setSpeakingSaturday(!speakingSaturday);\n  };\n  const handleChangeSunday = () => {\n    setSpeakingSunday(!speakingSunday);\n  };\n  const heartFavoriteHandler = useCallback((e, speakerRec) => {\n    e.preventDefault();\n    const toggledRec = { ...speakerRec, favorite: !speakerRec.favorite };\n    axios.put(`http://172.16.0.0:4000/speakers/${speakerRec.id}`, toggledRec)\n      .then(function (response) {\n        updateDataRecord(toggledRec);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }, []);\n\n  const newSpeakerList = useMemo(\n    () =>\n      data\n        .filter(\n          ({ sat, sun }) => (speakingSaturday && sat) || (speakingSunday && sun)\n        )\n        .sort(function (a, b) {\n          if (a.firstName < b.firstName) {\n            return -1;\n          }\n          if (a.firstName > b.firstName) {\n            return 1;\n          }\n          return 0;\n        }),\n    [speakingSaturday, speakingSunday, data]\n  );\n\n  const speakerListFiltered = isLoading ? [] : newSpeakerList;\n\n  if (hasErrored)\n    return (\n      <div>\n        {errorMessage}&nbsp;\"Make sure you have launched \"npm run json-server\"\n      </div>\n    );\n\n  /*\n  const [speakingSaturday, setSpeakingSaturday] = useState(true);\n  const [speakingSunday, setSpeakingSunday] = useState(true);\n\n  //const [isLoading, setIsLoading] = useState(true);\n  //const [speakerList, setSpeakerList] = useState([]);\n  //const [speakerList, setSpeakerList] = useReducer((state, action) => action, []);\n\n  \n  // function speakerReducer(state, action) {\n  //   function updateFavorite(favoriteValue) {\n  //     return state.map((item, index) => {\n  //       if (item.id === action.sessionId) {\n  //         item.favorite = favoriteValue;\n  //         return item;\n  //       }\n  //       return item;\n  //     });\n  //   }\n  //   switch (action.type) {\n  //     case \"setSpeakerList\": {\n  //       return action.data\n  //     }\n  //     case \"favorite\": {\n  //       return updateFavorite(true);\n  //     }\n  //     case \"unfavorite\": {\n  //       return updateFavorite(false);\n  //     }\n  //     default:\n  //       return state;\n  //   }\n  // }\n  \n  //const [speakerList, dispatch] = useReducer(speakersReducer, []);\n\n  const context = useContext(ConfigContext);\n\n  // useEffect(() => {\n  //   setIsLoading(true);\n  //   new Promise(function (resolve) {\n  //     setTimeout(function () {\n  //       resolve();\n  //     }, 1000);\n  //   }).then(() => {\n  //     setIsLoading(false);\n  //     const speakerListServerFilter = SpeakerData.filter(({ sat, sun }) => {\n  //       return (speakingSaturday && sat) || (speakingSunday && sun);\n  //     });\n  //     //setSpeakerList(speakerListServerFilter);\n  //     dispatch({\n  //       type: \"setSpeakerList\",\n  //       data: speakerListServerFilter\n  //     });\n  //   });\n  //   return () => {\n  //     console.log(\"cleanup\");\n  //   };\n  // }, []); // [speakingSunday, speakingSaturday]);\n  \n\n  const handleChangeSaturday = () => {\n    setSpeakingSaturday(!speakingSaturday);\n  };\n\n  const handleChangeSunday = () => {\n    setSpeakingSunday(!speakingSunday);\n  };\n\n  const heartFavoriteHandler = useCallback((e, favoriteValue) => {\n    e.preventDefault();\n    const sessionId = parseInt(e.target.attributes[\"data-sessionid\"].value);\n    dispatch({\n      type: favoriteValue === true ? \"favorite\" : \"unfavorite\",\n      sessionId\n    });\n    //console.log(\"changing session favorte to \" + favoriteValue);\n  }, []);\n\n  const newSpeakerList = useMemo(\n    () => data\n      .filter(\n        ({ sat, sun }) => (speakingSaturday && sat) || (speakingSunday && sun)\n      )\n      .sort(function (a, b) {\n        if (a.firstName < b.firstName) {\n          return -1;\n        }\n        if (a.firstName > b.firstName) {\n          return 1;\n        }\n        return 0;\n      }), [speakingSaturday, speakingSunday, data]);\n\n  const speakerListFiltered = isLoading\n    ? []\n    : newSpeakerList;\n  */\n\n  if (isLoading) return <div>Loading...</div>;\n\n  return (\n    <div>\n      <Header />\n      <Menu />\n      <div className=\"container\">\n        <div className=\"btn-toolbar  margintopbottom5 checkbox-bigger\">\n          <div className=\"hide\">\n            <div className=\"form-check-inline\">\n              <label className=\"form-check-label\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  onChange={handleChangeSaturday}\n                  checked={speakingSaturday}\n                />\n                Saturday Speakers\n              </label>\n            </div>\n            <div className=\"form-check-inline\">\n              <label className=\"form-check-label\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  onChange={handleChangeSunday}\n                  checked={speakingSunday}\n                />\n                Sunday Speakers\n              </label>\n            </div>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"card-deck\">\n            {speakerListFiltered.map(\n              ({ id, firstName, lastName, sat, sun, bio, favorite }) => {\n                return (\n                  <SpeakerDetail\n                    key={id}\n                    id={id}\n                    favorite={favorite}\n                    onHeartFavoriteHandler={heartFavoriteHandler}\n                    firstName={firstName}\n                    lastName={lastName}\n                    bio={bio}\n                    sat={sat}\n                    sun={sun}\n                  />\n                );\n              }\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Speakers;\n"]},"metadata":{},"sourceType":"module"}